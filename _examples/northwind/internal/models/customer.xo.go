package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Customer represents a row from 'Customers'.
type Customer struct {
	CustomerID   sql.NullInt64  `json:"CustomerID"`   // CustomerID
	CustomerName sql.NullString `json:"CustomerName"` // CustomerName
	ContactName  sql.NullString `json:"ContactName"`  // ContactName
	Address      sql.NullString `json:"Address"`      // Address
	City         sql.NullString `json:"City"`         // City
	PostalCode   sql.NullString `json:"PostalCode"`   // PostalCode
	Country      sql.NullString `json:"Country"`      // Country
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Customer] exists in the database.
func (c *Customer) Exists() bool {
	return c._exists
}

// Deleted returns true when the [Customer] has been marked for deletion
// from the database.
func (c *Customer) Deleted() bool {
	return c._deleted
}

// Insert inserts the [Customer] to the database.
func (c *Customer) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO Customers (` +
		`CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)`
	// run
	logf(sqlstr, c.CustomerName, c.ContactName, c.Address, c.City, c.PostalCode, c.Country)
	res, err := db.ExecContext(ctx, sqlstr, c.CustomerID, c.CustomerName, c.ContactName, c.Address, c.City, c.PostalCode, c.Country)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	c.CustomerID = sql.NullInt64{Valid: true, Int64: id}
	// set exists
	c._exists = true
	return nil
}

// Update updates a [Customer] in the database.
func (c *Customer) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE Customers SET ` +
		`CustomerName = $1, ContactName = $2, Address = $3, City = $4, PostalCode = $5, Country = $6 ` +
		`WHERE CustomerID = $7`
	// run
	logf(sqlstr, c.CustomerName, c.ContactName, c.Address, c.City, c.PostalCode, c.Country, c.CustomerID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustomerName, c.ContactName, c.Address, c.City, c.PostalCode, c.Country, c.CustomerID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Customer] to the database.
func (c *Customer) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [Customer].
func (c *Customer) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO Customers (` +
		`CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)` +
		` ON CONFLICT (CustomerID) DO ` +
		`UPDATE SET ` +
		`CustomerName = EXCLUDED.CustomerName, ContactName = EXCLUDED.ContactName, Address = EXCLUDED.Address, City = EXCLUDED.City, PostalCode = EXCLUDED.PostalCode, Country = EXCLUDED.Country `
	// run
	logf(sqlstr, c.CustomerID, c.CustomerName, c.ContactName, c.Address, c.City, c.PostalCode, c.Country)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustomerID, c.CustomerName, c.ContactName, c.Address, c.City, c.PostalCode, c.Country); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [Customer] from the database.
func (c *Customer) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM Customers ` +
		`WHERE CustomerID = $1`
	// run
	logf(sqlstr, c.CustomerID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustomerID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CustomerByCustomerID retrieves a row from 'Customers' as a [Customer].
//
// Generated from index 'Customers_CustomerID_pkey'.
func CustomerByCustomerID(ctx context.Context, db DB, customerID sql.NullInt64) (*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country ` +
		`FROM Customers ` +
		`WHERE CustomerID = $1`
	// run
	logf(sqlstr, customerID)
	c := Customer{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, customerID).Scan(&c.CustomerID, &c.CustomerName, &c.ContactName, &c.Address, &c.City, &c.PostalCode, &c.Country); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}
