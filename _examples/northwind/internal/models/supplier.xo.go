package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Supplier represents a row from 'Suppliers'.
type Supplier struct {
	SupplierID   sql.NullInt64  `json:"SupplierID"`   // SupplierID
	SupplierName sql.NullString `json:"SupplierName"` // SupplierName
	ContactName  sql.NullString `json:"ContactName"`  // ContactName
	Address      sql.NullString `json:"Address"`      // Address
	City         sql.NullString `json:"City"`         // City
	PostalCode   sql.NullString `json:"PostalCode"`   // PostalCode
	Country      sql.NullString `json:"Country"`      // Country
	Phone        sql.NullString `json:"Phone"`        // Phone
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Supplier] exists in the database.
func (s *Supplier) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Supplier] has been marked for deletion
// from the database.
func (s *Supplier) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Supplier] to the database.
func (s *Supplier) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO Suppliers (` +
		`SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`
	// run
	logf(sqlstr, s.SupplierName, s.ContactName, s.Address, s.City, s.PostalCode, s.Country, s.Phone)
	res, err := db.ExecContext(ctx, sqlstr, s.SupplierID, s.SupplierName, s.ContactName, s.Address, s.City, s.PostalCode, s.Country, s.Phone)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	s.SupplierID = sql.NullInt64{Valid: true, Int64: id}
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Supplier] in the database.
func (s *Supplier) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE Suppliers SET ` +
		`SupplierName = $1, ContactName = $2, Address = $3, City = $4, PostalCode = $5, Country = $6, Phone = $7 ` +
		`WHERE SupplierID = $8`
	// run
	logf(sqlstr, s.SupplierName, s.ContactName, s.Address, s.City, s.PostalCode, s.Country, s.Phone, s.SupplierID)
	if _, err := db.ExecContext(ctx, sqlstr, s.SupplierName, s.ContactName, s.Address, s.City, s.PostalCode, s.Country, s.Phone, s.SupplierID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Supplier] to the database.
func (s *Supplier) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Supplier].
func (s *Supplier) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO Suppliers (` +
		`SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (SupplierID) DO ` +
		`UPDATE SET ` +
		`SupplierName = EXCLUDED.SupplierName, ContactName = EXCLUDED.ContactName, Address = EXCLUDED.Address, City = EXCLUDED.City, PostalCode = EXCLUDED.PostalCode, Country = EXCLUDED.Country, Phone = EXCLUDED.Phone `
	// run
	logf(sqlstr, s.SupplierID, s.SupplierName, s.ContactName, s.Address, s.City, s.PostalCode, s.Country, s.Phone)
	if _, err := db.ExecContext(ctx, sqlstr, s.SupplierID, s.SupplierName, s.ContactName, s.Address, s.City, s.PostalCode, s.Country, s.Phone); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Supplier] from the database.
func (s *Supplier) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM Suppliers ` +
		`WHERE SupplierID = $1`
	// run
	logf(sqlstr, s.SupplierID)
	if _, err := db.ExecContext(ctx, sqlstr, s.SupplierID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// SupplierBySupplierID retrieves a row from 'Suppliers' as a [Supplier].
//
// Generated from index 'Suppliers_SupplierID_pkey'.
func SupplierBySupplierID(ctx context.Context, db DB, supplierID sql.NullInt64) (*Supplier, error) {
	// query
	const sqlstr = `SELECT ` +
		`SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone ` +
		`FROM Suppliers ` +
		`WHERE SupplierID = $1`
	// run
	logf(sqlstr, supplierID)
	s := Supplier{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, supplierID).Scan(&s.SupplierID, &s.SupplierName, &s.ContactName, &s.Address, &s.City, &s.PostalCode, &s.Country, &s.Phone); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}
