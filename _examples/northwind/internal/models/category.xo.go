// Package models contains generated code for schema 'northwind.db'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Category represents a row from 'Categories'.
type Category struct {
	CategoryID   sql.NullInt64  `json:"CategoryID"`   // CategoryID
	CategoryName sql.NullString `json:"CategoryName"` // CategoryName
	Description  sql.NullString `json:"Description"`  // Description
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Category] exists in the database.
func (c *Category) Exists() bool {
	return c._exists
}

// Deleted returns true when the [Category] has been marked for deletion
// from the database.
func (c *Category) Deleted() bool {
	return c._deleted
}

// Insert inserts the [Category] to the database.
func (c *Category) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO Categories (` +
		`CategoryID, CategoryName, Description` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`
	// run
	logf(sqlstr, c.CategoryName, c.Description)
	res, err := db.ExecContext(ctx, sqlstr, c.CategoryID, c.CategoryName, c.Description)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	c.CategoryID = sql.NullInt64{Valid: true, Int64: id}
	// set exists
	c._exists = true
	return nil
}

// Update updates a [Category] in the database.
func (c *Category) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE Categories SET ` +
		`CategoryName = $1, Description = $2 ` +
		`WHERE CategoryID = $3`
	// run
	logf(sqlstr, c.CategoryName, c.Description, c.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CategoryName, c.Description, c.CategoryID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Category] to the database.
func (c *Category) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [Category].
func (c *Category) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO Categories (` +
		`CategoryID, CategoryName, Description` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (CategoryID) DO ` +
		`UPDATE SET ` +
		`CategoryName = EXCLUDED.CategoryName, Description = EXCLUDED.Description `
	// run
	logf(sqlstr, c.CategoryID, c.CategoryName, c.Description)
	if _, err := db.ExecContext(ctx, sqlstr, c.CategoryID, c.CategoryName, c.Description); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [Category] from the database.
func (c *Category) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM Categories ` +
		`WHERE CategoryID = $1`
	// run
	logf(sqlstr, c.CategoryID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CategoryID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CategoryByCategoryID retrieves a row from 'Categories' as a [Category].
//
// Generated from index 'Categories_CategoryID_pkey'.
func CategoryByCategoryID(ctx context.Context, db DB, categoryID sql.NullInt64) (*Category, error) {
	// query
	const sqlstr = `SELECT ` +
		`CategoryID, CategoryName, Description ` +
		`FROM Categories ` +
		`WHERE CategoryID = $1`
	// run
	logf(sqlstr, categoryID)
	c := Category{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, categoryID).Scan(&c.CategoryID, &c.CategoryName, &c.Description); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}
