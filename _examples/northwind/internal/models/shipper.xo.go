package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Shipper represents a row from 'Shippers'.
type Shipper struct {
	ShipperID   sql.NullInt64  `json:"ShipperID"`   // ShipperID
	ShipperName sql.NullString `json:"ShipperName"` // ShipperName
	Phone       sql.NullString `json:"Phone"`       // Phone
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Shipper] exists in the database.
func (s *Shipper) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Shipper] has been marked for deletion
// from the database.
func (s *Shipper) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Shipper] to the database.
func (s *Shipper) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO Shippers (` +
		`ShipperID, ShipperName, Phone` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`
	// run
	logf(sqlstr, s.ShipperName, s.Phone)
	res, err := db.ExecContext(ctx, sqlstr, s.ShipperID, s.ShipperName, s.Phone)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	s.ShipperID = sql.NullInt64{Valid: true, Int64: id}
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Shipper] in the database.
func (s *Shipper) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE Shippers SET ` +
		`ShipperName = $1, Phone = $2 ` +
		`WHERE ShipperID = $3`
	// run
	logf(sqlstr, s.ShipperName, s.Phone, s.ShipperID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ShipperName, s.Phone, s.ShipperID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Shipper] to the database.
func (s *Shipper) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Shipper].
func (s *Shipper) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO Shippers (` +
		`ShipperID, ShipperName, Phone` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (ShipperID) DO ` +
		`UPDATE SET ` +
		`ShipperName = EXCLUDED.ShipperName, Phone = EXCLUDED.Phone `
	// run
	logf(sqlstr, s.ShipperID, s.ShipperName, s.Phone)
	if _, err := db.ExecContext(ctx, sqlstr, s.ShipperID, s.ShipperName, s.Phone); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Shipper] from the database.
func (s *Shipper) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM Shippers ` +
		`WHERE ShipperID = $1`
	// run
	logf(sqlstr, s.ShipperID)
	if _, err := db.ExecContext(ctx, sqlstr, s.ShipperID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// ShipperByShipperID retrieves a row from 'Shippers' as a [Shipper].
//
// Generated from index 'Shippers_ShipperID_pkey'.
func ShipperByShipperID(ctx context.Context, db DB, shipperID sql.NullInt64) (*Shipper, error) {
	// query
	const sqlstr = `SELECT ` +
		`ShipperID, ShipperName, Phone ` +
		`FROM Shippers ` +
		`WHERE ShipperID = $1`
	// run
	logf(sqlstr, shipperID)
	s := Shipper{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, shipperID).Scan(&s.ShipperID, &s.ShipperName, &s.Phone); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}
