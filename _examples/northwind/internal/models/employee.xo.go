package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Employee represents a row from 'Employees'.
type Employee struct {
	EmployeeID sql.NullInt64  `json:"EmployeeID"` // EmployeeID
	LastName   sql.NullString `json:"LastName"`   // LastName
	FirstName  sql.NullString `json:"FirstName"`  // FirstName
	BirthDate  *Time          `json:"BirthDate"`  // BirthDate
	Photo      sql.NullString `json:"Photo"`      // Photo
	Notes      sql.NullString `json:"Notes"`      // Notes
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Employee] exists in the database.
func (e *Employee) Exists() bool {
	return e._exists
}

// Deleted returns true when the [Employee] has been marked for deletion
// from the database.
func (e *Employee) Deleted() bool {
	return e._deleted
}

// Insert inserts the [Employee] to the database.
func (e *Employee) Insert(ctx context.Context, db DB) error {
	switch {
	case e._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case e._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO Employees (` +
		`EmployeeID, LastName, FirstName, BirthDate, Photo, Notes` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, e.LastName, e.FirstName, e.BirthDate, e.Photo, e.Notes)
	res, err := db.ExecContext(ctx, sqlstr, e.EmployeeID, e.LastName, e.FirstName, e.BirthDate, e.Photo, e.Notes)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	e.EmployeeID = sql.NullInt64{Valid: true, Int64: id}
	// set exists
	e._exists = true
	return nil
}

// Update updates a [Employee] in the database.
func (e *Employee) Update(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case e._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE Employees SET ` +
		`LastName = $1, FirstName = $2, BirthDate = $3, Photo = $4, Notes = $5 ` +
		`WHERE EmployeeID = $6`
	// run
	logf(sqlstr, e.LastName, e.FirstName, e.BirthDate, e.Photo, e.Notes, e.EmployeeID)
	if _, err := db.ExecContext(ctx, sqlstr, e.LastName, e.FirstName, e.BirthDate, e.Photo, e.Notes, e.EmployeeID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Employee] to the database.
func (e *Employee) Save(ctx context.Context, db DB) error {
	if e.Exists() {
		return e.Update(ctx, db)
	}
	return e.Insert(ctx, db)
}

// Upsert performs an upsert for [Employee].
func (e *Employee) Upsert(ctx context.Context, db DB) error {
	switch {
	case e._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO Employees (` +
		`EmployeeID, LastName, FirstName, BirthDate, Photo, Notes` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (EmployeeID) DO ` +
		`UPDATE SET ` +
		`LastName = EXCLUDED.LastName, FirstName = EXCLUDED.FirstName, BirthDate = EXCLUDED.BirthDate, Photo = EXCLUDED.Photo, Notes = EXCLUDED.Notes `
	// run
	logf(sqlstr, e.EmployeeID, e.LastName, e.FirstName, e.BirthDate, e.Photo, e.Notes)
	if _, err := db.ExecContext(ctx, sqlstr, e.EmployeeID, e.LastName, e.FirstName, e.BirthDate, e.Photo, e.Notes); err != nil {
		return logerror(err)
	}
	// set exists
	e._exists = true
	return nil
}

// Delete deletes the [Employee] from the database.
func (e *Employee) Delete(ctx context.Context, db DB) error {
	switch {
	case !e._exists: // doesn't exist
		return nil
	case e._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM Employees ` +
		`WHERE EmployeeID = $1`
	// run
	logf(sqlstr, e.EmployeeID)
	if _, err := db.ExecContext(ctx, sqlstr, e.EmployeeID); err != nil {
		return logerror(err)
	}
	// set deleted
	e._deleted = true
	return nil
}

// EmployeeByEmployeeID retrieves a row from 'Employees' as a [Employee].
//
// Generated from index 'Employees_EmployeeID_pkey'.
func EmployeeByEmployeeID(ctx context.Context, db DB, employeeID sql.NullInt64) (*Employee, error) {
	// query
	const sqlstr = `SELECT ` +
		`EmployeeID, LastName, FirstName, BirthDate, Photo, Notes ` +
		`FROM Employees ` +
		`WHERE EmployeeID = $1`
	// run
	logf(sqlstr, employeeID)
	e := Employee{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, employeeID).Scan(&e.EmployeeID, &e.LastName, &e.FirstName, &e.BirthDate, &e.Photo, &e.Notes); err != nil {
		return nil, logerror(err)
	}
	return &e, nil
}
