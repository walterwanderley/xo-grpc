// Code generated by xo-grpc (https://github.com/walterwanderley/xo-grpc).

package application

import (
	"context"
	"database/sql"
	"fmt"

	"go.uber.org/zap"
	"google.golang.org/protobuf/types/known/emptypb"

	pb "northwind/api/territory/v1"
	typespb "northwind/api/typespb/v1"
	models "northwind/internal/models"
)

type TerritoryService struct {
	pb.UnimplementedTerritoryServiceServer
	db     *sql.DB
	logger *zap.Logger
}

func NewTerritoryService(logger *zap.Logger, db *sql.DB) pb.TerritoryServiceServer {
	return &TerritoryService{logger: logger, db: db}
}

func (s *TerritoryService) Delete(ctx context.Context, req *pb.DeleteRequest) (res *emptypb.Empty, err error) {
	m, err := models.TerritoryByTerritoryID(ctx, s.db, req.TerritoryId)
	if err != nil {
		return
	}

	err = m.Delete(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}

func (s *TerritoryService) Insert(ctx context.Context, req *pb.InsertRequest) (res *emptypb.Empty, err error) {
	var m models.Territory
	m.RegionID = int16(req.GetRegionId())
	m.TerritoryDescription = req.GetTerritoryDescription()
	m.TerritoryID = req.GetTerritoryId()

	err = m.Insert(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	err = sendResourceLocation(ctx, fmt.Sprintf("/%v", m.TerritoryID))

	return
}

func (s *TerritoryService) Region(ctx context.Context, req *pb.RegionRequest) (res *typespb.Region, err error) {
	m, err := models.TerritoryByTerritoryID(ctx, s.db, req.TerritoryId)
	if err != nil {
		return
	}

	result, err := m.Region(ctx, s.db)
	if err != nil {
		return
	}

	res = new(typespb.Region)
	res.RegionId = int32(result.RegionID)
	res.RegionDescription = result.RegionDescription

	return
}

func (s *TerritoryService) TerritoryByTerritoryID(ctx context.Context, req *pb.TerritoryByTerritoryIDRequest) (res *typespb.Territory, err error) {

	territoryID := req.GetTerritoryId()

	result, err := models.TerritoryByTerritoryID(ctx, s.db, territoryID)
	if err != nil {
		return
	}

	res = new(typespb.Territory)
	res.TerritoryId = result.TerritoryID
	res.TerritoryDescription = result.TerritoryDescription
	res.RegionId = int32(result.RegionID)

	return
}

func (s *TerritoryService) Update(ctx context.Context, req *pb.UpdateRequest) (res *emptypb.Empty, err error) {
	m, err := models.TerritoryByTerritoryID(ctx, s.db, req.TerritoryId)
	if err != nil {
		return
	}
	m.RegionID = int16(req.GetRegionId())
	m.TerritoryDescription = req.GetTerritoryDescription()
	m.TerritoryID = req.GetTerritoryId()

	err = m.Update(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}

func (s *TerritoryService) Upsert(ctx context.Context, req *pb.UpsertRequest) (res *emptypb.Empty, err error) {
	var m models.Territory
	m.RegionID = int16(req.GetRegionId())
	m.TerritoryDescription = req.GetTerritoryDescription()
	m.TerritoryID = req.GetTerritoryId()

	err = m.Upsert(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}
