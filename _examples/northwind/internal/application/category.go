// Code generated by xo-grpc (https://github.com/walterwanderley/xo-grpc).

package application

import (
	"context"
	"database/sql"
	"fmt"

	"go.uber.org/zap"
	"google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/wrapperspb"

	pb "northwind/api/category/v1"
	typespb "northwind/api/typespb/v1"
	models "northwind/internal/models"
)

type CategoryService struct {
	pb.UnimplementedCategoryServiceServer
	db     *sql.DB
	logger *zap.Logger
}

func NewCategoryService(logger *zap.Logger, db *sql.DB) pb.CategoryServiceServer {
	return &CategoryService{logger: logger, db: db}
}

func (s *CategoryService) CategoryByCategoryID(ctx context.Context, req *pb.CategoryByCategoryIDRequest) (res *typespb.Category, err error) {

	var categoryID sql.NullInt64
	if v := req.GetCategoryId(); v != nil {
		categoryID = sql.NullInt64{Valid: true, Int64: v.Value}
	}

	result, err := models.CategoryByCategoryID(ctx, s.db, categoryID)
	if err != nil {
		return
	}

	res = new(typespb.Category)
	if result.CategoryID.Valid {
		res.CategoryId = wrapperspb.Int64(result.CategoryID.Int64)
	}
	if result.CategoryName.Valid {
		res.CategoryName = wrapperspb.String(result.CategoryName.String)
	}
	if result.Description.Valid {
		res.Description = wrapperspb.String(result.Description.String)
	}

	return
}

func (s *CategoryService) Delete(ctx context.Context, req *pb.DeleteRequest) (res *emptypb.Empty, err error) {
	m, err := models.CategoryByCategoryID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.CategoryId.Value})
	if err != nil {
		return
	}

	err = m.Delete(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}

func (s *CategoryService) Insert(ctx context.Context, req *pb.InsertRequest) (res *emptypb.Empty, err error) {
	var m models.Category
	if v := req.GetCategoryId(); v != nil {
		m.CategoryID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetCategoryName(); v != nil {
		m.CategoryName = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetDescription(); v != nil {
		m.Description = sql.NullString{Valid: true, String: v.Value}
	}

	err = m.Insert(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	err = sendResourceLocation(ctx, fmt.Sprintf("/%v", m.CategoryID))

	return
}

func (s *CategoryService) Update(ctx context.Context, req *pb.UpdateRequest) (res *emptypb.Empty, err error) {
	m, err := models.CategoryByCategoryID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.CategoryId.Value})
	if err != nil {
		return
	}
	if v := req.GetCategoryId(); v != nil {
		m.CategoryID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetCategoryName(); v != nil {
		m.CategoryName = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetDescription(); v != nil {
		m.Description = sql.NullString{Valid: true, String: v.Value}
	}

	err = m.Update(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}

func (s *CategoryService) Upsert(ctx context.Context, req *pb.UpsertRequest) (res *emptypb.Empty, err error) {
	var m models.Category
	if v := req.GetCategoryId(); v != nil {
		m.CategoryID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetCategoryName(); v != nil {
		m.CategoryName = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetDescription(); v != nil {
		m.Description = sql.NullString{Valid: true, String: v.Value}
	}

	err = m.Upsert(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}
