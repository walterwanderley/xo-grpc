// Code generated by xo-grpc (https://github.com/walterwanderley/xo-grpc).

package application

import (
	"context"
	"database/sql"
	"fmt"

	"go.uber.org/zap"
	"google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"

	pb "northwind/api/order_detail/v1"
	typespb "northwind/api/typespb/v1"
	models "northwind/internal/models"
)

type OrderDetailService struct {
	pb.UnimplementedOrderDetailServiceServer
	db     *sql.DB
	logger *zap.Logger
}

func NewOrderDetailService(logger *zap.Logger, db *sql.DB) pb.OrderDetailServiceServer {
	return &OrderDetailService{logger: logger, db: db}
}

func (s *OrderDetailService) Delete(ctx context.Context, req *pb.DeleteRequest) (res *emptypb.Empty, err error) {
	m, err := models.OrderDetailByOrderDetailID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.OrderDetailId.Value})
	if err != nil {
		return
	}

	err = m.Delete(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}

func (s *OrderDetailService) Insert(ctx context.Context, req *pb.InsertRequest) (res *emptypb.Empty, err error) {
	var m models.OrderDetail
	if v := req.GetOrderDetailId(); v != nil {
		m.OrderDetailID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetOrderId(); v != nil {
		m.OrderID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetProductId(); v != nil {
		m.ProductID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetQuantity(); v != nil {
		m.Quantity = sql.NullInt64{Valid: true, Int64: v.Value}
	}

	err = m.Insert(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	err = sendResourceLocation(ctx, fmt.Sprintf("/%v", m.OrderDetailID))

	return
}

func (s *OrderDetailService) Order(ctx context.Context, req *pb.OrderRequest) (res *typespb.Order, err error) {
	m, err := models.OrderDetailByOrderDetailID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.OrderDetailId.Value})
	if err != nil {
		return
	}

	result, err := m.Order(ctx, s.db)
	if err != nil {
		return
	}

	res = new(typespb.Order)
	if result.OrderID.Valid {
		res.OrderId = wrapperspb.Int64(result.OrderID.Int64)
	}
	if result.CustomerID.Valid {
		res.CustomerId = wrapperspb.Int64(result.CustomerID.Int64)
	}
	if result.EmployeeID.Valid {
		res.EmployeeId = wrapperspb.Int64(result.EmployeeID.Int64)
	}
	res.OrderDate = timestamppb.New(result.OrderDate.Time())
	if result.ShipperID.Valid {
		res.ShipperId = wrapperspb.Int64(result.ShipperID.Int64)
	}

	return
}

func (s *OrderDetailService) OrderDetailByOrderDetailID(ctx context.Context, req *pb.OrderDetailByOrderDetailIDRequest) (res *typespb.OrderDetail, err error) {

	var orderDetailID sql.NullInt64
	if v := req.GetOrderDetailId(); v != nil {
		orderDetailID = sql.NullInt64{Valid: true, Int64: v.Value}
	}

	result, err := models.OrderDetailByOrderDetailID(ctx, s.db, orderDetailID)
	if err != nil {
		return
	}

	res = new(typespb.OrderDetail)
	if result.OrderDetailID.Valid {
		res.OrderDetailId = wrapperspb.Int64(result.OrderDetailID.Int64)
	}
	if result.OrderID.Valid {
		res.OrderId = wrapperspb.Int64(result.OrderID.Int64)
	}
	if result.ProductID.Valid {
		res.ProductId = wrapperspb.Int64(result.ProductID.Int64)
	}
	if result.Quantity.Valid {
		res.Quantity = wrapperspb.Int64(result.Quantity.Int64)
	}

	return
}

func (s *OrderDetailService) Product(ctx context.Context, req *pb.ProductRequest) (res *typespb.Product, err error) {
	m, err := models.OrderDetailByOrderDetailID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.OrderDetailId.Value})
	if err != nil {
		return
	}

	result, err := m.Product(ctx, s.db)
	if err != nil {
		return
	}

	res = new(typespb.Product)
	if result.ProductID.Valid {
		res.ProductId = wrapperspb.Int64(result.ProductID.Int64)
	}
	if result.ProductName.Valid {
		res.ProductName = wrapperspb.String(result.ProductName.String)
	}
	if result.SupplierID.Valid {
		res.SupplierId = wrapperspb.Int64(result.SupplierID.Int64)
	}
	if result.CategoryID.Valid {
		res.CategoryId = wrapperspb.Int64(result.CategoryID.Int64)
	}
	if result.Unit.Valid {
		res.Unit = wrapperspb.String(result.Unit.String)
	}
	if result.Price.Valid {
		res.Price = wrapperspb.Double(result.Price.Float64)
	}

	return
}

func (s *OrderDetailService) Update(ctx context.Context, req *pb.UpdateRequest) (res *emptypb.Empty, err error) {
	m, err := models.OrderDetailByOrderDetailID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.OrderDetailId.Value})
	if err != nil {
		return
	}
	if v := req.GetOrderDetailId(); v != nil {
		m.OrderDetailID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetOrderId(); v != nil {
		m.OrderID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetProductId(); v != nil {
		m.ProductID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetQuantity(); v != nil {
		m.Quantity = sql.NullInt64{Valid: true, Int64: v.Value}
	}

	err = m.Update(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}

func (s *OrderDetailService) Upsert(ctx context.Context, req *pb.UpsertRequest) (res *emptypb.Empty, err error) {
	var m models.OrderDetail
	if v := req.GetOrderDetailId(); v != nil {
		m.OrderDetailID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetOrderId(); v != nil {
		m.OrderID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetProductId(); v != nil {
		m.ProductID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetQuantity(); v != nil {
		m.Quantity = sql.NullInt64{Valid: true, Int64: v.Value}
	}

	err = m.Upsert(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}
