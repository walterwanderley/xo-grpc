// Code generated by xo-grpc (https://github.com/walterwanderley/xo-grpc).

package application

import (
	"context"
	"database/sql"
	"fmt"

	"go.uber.org/zap"
	"google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"

	pb "northwind/api/order/v1"
	typespb "northwind/api/typespb/v1"
	models "northwind/internal/models"
	"northwind/internal/validation"
)

type OrderService struct {
	pb.UnimplementedOrderServiceServer
	db     *sql.DB
	logger *zap.Logger
}

func NewOrderService(logger *zap.Logger, db *sql.DB) pb.OrderServiceServer {
	return &OrderService{logger: logger, db: db}
}

func (s *OrderService) Customer(ctx context.Context, req *pb.CustomerRequest) (res *typespb.Customer, err error) {
	m, err := models.OrderByOrderID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.OrderId.Value})
	if err != nil {
		return
	}

	result, err := m.Customer(ctx, s.db)
	if err != nil {
		return
	}

	res = new(typespb.Customer)
	if result.CustomerID.Valid {
		res.CustomerId = wrapperspb.Int64(result.CustomerID.Int64)
	}
	if result.CustomerName.Valid {
		res.CustomerName = wrapperspb.String(result.CustomerName.String)
	}
	if result.ContactName.Valid {
		res.ContactName = wrapperspb.String(result.ContactName.String)
	}
	if result.Address.Valid {
		res.Address = wrapperspb.String(result.Address.String)
	}
	if result.City.Valid {
		res.City = wrapperspb.String(result.City.String)
	}
	if result.PostalCode.Valid {
		res.PostalCode = wrapperspb.String(result.PostalCode.String)
	}
	if result.Country.Valid {
		res.Country = wrapperspb.String(result.Country.String)
	}

	return
}

func (s *OrderService) Delete(ctx context.Context, req *pb.DeleteRequest) (res *emptypb.Empty, err error) {
	m, err := models.OrderByOrderID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.OrderId.Value})
	if err != nil {
		return
	}

	err = m.Delete(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}

func (s *OrderService) Employee(ctx context.Context, req *pb.EmployeeRequest) (res *typespb.Employee, err error) {
	m, err := models.OrderByOrderID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.OrderId.Value})
	if err != nil {
		return
	}

	result, err := m.Employee(ctx, s.db)
	if err != nil {
		return
	}

	res = new(typespb.Employee)
	if result.EmployeeID.Valid {
		res.EmployeeId = wrapperspb.Int64(result.EmployeeID.Int64)
	}
	if result.LastName.Valid {
		res.LastName = wrapperspb.String(result.LastName.String)
	}
	if result.FirstName.Valid {
		res.FirstName = wrapperspb.String(result.FirstName.String)
	}
	res.BirthDate = timestamppb.New(result.BirthDate.Time())
	if result.Photo.Valid {
		res.Photo = wrapperspb.String(result.Photo.String)
	}
	if result.Notes.Valid {
		res.Notes = wrapperspb.String(result.Notes.String)
	}

	return
}

func (s *OrderService) Insert(ctx context.Context, req *pb.InsertRequest) (res *emptypb.Empty, err error) {
	var m models.Order
	if v := req.GetCustomerId(); v != nil {
		m.CustomerID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetEmployeeId(); v != nil {
		m.EmployeeID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetOrderDate(); v != nil {
		if err = v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid OrderDate: %s%w", err.Error(), validation.ErrUserInput)
			return
		}
		t := models.NewTime(v.AsTime())
		m.OrderDate = &t
	}
	if v := req.GetOrderId(); v != nil {
		m.OrderID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetShipperId(); v != nil {
		m.ShipperID = sql.NullInt64{Valid: true, Int64: v.Value}
	}

	err = m.Insert(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	err = sendResourceLocation(ctx, fmt.Sprintf("/%v", m.OrderID))

	return
}

func (s *OrderService) OrderByOrderID(ctx context.Context, req *pb.OrderByOrderIDRequest) (res *typespb.Order, err error) {

	var orderID sql.NullInt64
	if v := req.GetOrderId(); v != nil {
		orderID = sql.NullInt64{Valid: true, Int64: v.Value}
	}

	result, err := models.OrderByOrderID(ctx, s.db, orderID)
	if err != nil {
		return
	}

	res = new(typespb.Order)
	if result.OrderID.Valid {
		res.OrderId = wrapperspb.Int64(result.OrderID.Int64)
	}
	if result.CustomerID.Valid {
		res.CustomerId = wrapperspb.Int64(result.CustomerID.Int64)
	}
	if result.EmployeeID.Valid {
		res.EmployeeId = wrapperspb.Int64(result.EmployeeID.Int64)
	}
	res.OrderDate = timestamppb.New(result.OrderDate.Time())
	if result.ShipperID.Valid {
		res.ShipperId = wrapperspb.Int64(result.ShipperID.Int64)
	}

	return
}

func (s *OrderService) Shipper(ctx context.Context, req *pb.ShipperRequest) (res *typespb.Shipper, err error) {
	m, err := models.OrderByOrderID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.OrderId.Value})
	if err != nil {
		return
	}

	result, err := m.Shipper(ctx, s.db)
	if err != nil {
		return
	}

	res = new(typespb.Shipper)
	if result.ShipperID.Valid {
		res.ShipperId = wrapperspb.Int64(result.ShipperID.Int64)
	}
	if result.ShipperName.Valid {
		res.ShipperName = wrapperspb.String(result.ShipperName.String)
	}
	if result.Phone.Valid {
		res.Phone = wrapperspb.String(result.Phone.String)
	}

	return
}

func (s *OrderService) Update(ctx context.Context, req *pb.UpdateRequest) (res *emptypb.Empty, err error) {
	m, err := models.OrderByOrderID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.OrderId.Value})
	if err != nil {
		return
	}
	if v := req.GetCustomerId(); v != nil {
		m.CustomerID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetEmployeeId(); v != nil {
		m.EmployeeID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetOrderDate(); v != nil {
		if err = v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid OrderDate: %s%w", err.Error(), validation.ErrUserInput)
			return
		}
		t := models.NewTime(v.AsTime())
		m.OrderDate = &t
	}
	if v := req.GetOrderId(); v != nil {
		m.OrderID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetShipperId(); v != nil {
		m.ShipperID = sql.NullInt64{Valid: true, Int64: v.Value}
	}

	err = m.Update(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}

func (s *OrderService) Upsert(ctx context.Context, req *pb.UpsertRequest) (res *emptypb.Empty, err error) {
	var m models.Order
	if v := req.GetCustomerId(); v != nil {
		m.CustomerID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetEmployeeId(); v != nil {
		m.EmployeeID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetOrderDate(); v != nil {
		if err = v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid OrderDate: %s%w", err.Error(), validation.ErrUserInput)
			return
		}
		t := models.NewTime(v.AsTime())
		m.OrderDate = &t
	}
	if v := req.GetOrderId(); v != nil {
		m.OrderID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetShipperId(); v != nil {
		m.ShipperID = sql.NullInt64{Valid: true, Int64: v.Value}
	}

	err = m.Upsert(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}
