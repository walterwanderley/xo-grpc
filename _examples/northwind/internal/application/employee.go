// Code generated by xo-grpc (https://github.com/walterwanderley/xo-grpc).

package application

import (
	"context"
	"database/sql"
	"fmt"

	"go.uber.org/zap"
	"google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"

	pb "northwind/api/employee/v1"
	typespb "northwind/api/typespb/v1"
	models "northwind/internal/models"
	"northwind/internal/validation"
)

type EmployeeService struct {
	pb.UnimplementedEmployeeServiceServer
	db     *sql.DB
	logger *zap.Logger
}

func NewEmployeeService(logger *zap.Logger, db *sql.DB) pb.EmployeeServiceServer {
	return &EmployeeService{logger: logger, db: db}
}

func (s *EmployeeService) Delete(ctx context.Context, req *pb.DeleteRequest) (res *emptypb.Empty, err error) {
	m, err := models.EmployeeByEmployeeID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.EmployeeId.Value})
	if err != nil {
		return
	}

	err = m.Delete(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}

func (s *EmployeeService) EmployeeByEmployeeID(ctx context.Context, req *pb.EmployeeByEmployeeIDRequest) (res *typespb.Employee, err error) {

	var employeeID sql.NullInt64
	if v := req.GetEmployeeId(); v != nil {
		employeeID = sql.NullInt64{Valid: true, Int64: v.Value}
	}

	result, err := models.EmployeeByEmployeeID(ctx, s.db, employeeID)
	if err != nil {
		return
	}

	res = new(typespb.Employee)
	if result.EmployeeID.Valid {
		res.EmployeeId = wrapperspb.Int64(result.EmployeeID.Int64)
	}
	if result.LastName.Valid {
		res.LastName = wrapperspb.String(result.LastName.String)
	}
	if result.FirstName.Valid {
		res.FirstName = wrapperspb.String(result.FirstName.String)
	}
	res.BirthDate = timestamppb.New(result.BirthDate.Time())
	if result.Photo.Valid {
		res.Photo = wrapperspb.String(result.Photo.String)
	}
	if result.Notes.Valid {
		res.Notes = wrapperspb.String(result.Notes.String)
	}

	return
}

func (s *EmployeeService) Insert(ctx context.Context, req *pb.InsertRequest) (res *emptypb.Empty, err error) {
	var m models.Employee
	if v := req.GetBirthDate(); v != nil {
		if err = v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid BirthDate: %s%w", err.Error(), validation.ErrUserInput)
			return
		}
		t := models.NewTime(v.AsTime())
		m.BirthDate = &t
	}
	if v := req.GetEmployeeId(); v != nil {
		m.EmployeeID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetFirstName(); v != nil {
		m.FirstName = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetLastName(); v != nil {
		m.LastName = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetNotes(); v != nil {
		m.Notes = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetPhoto(); v != nil {
		m.Photo = sql.NullString{Valid: true, String: v.Value}
	}

	err = m.Insert(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	err = sendResourceLocation(ctx, fmt.Sprintf("/%v", m.EmployeeID))

	return
}

func (s *EmployeeService) Update(ctx context.Context, req *pb.UpdateRequest) (res *emptypb.Empty, err error) {
	m, err := models.EmployeeByEmployeeID(ctx, s.db, sql.NullInt64{Valid: true, Int64: req.EmployeeId.Value})
	if err != nil {
		return
	}
	if v := req.GetBirthDate(); v != nil {
		if err = v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid BirthDate: %s%w", err.Error(), validation.ErrUserInput)
			return
		}
		t := models.NewTime(v.AsTime())
		m.BirthDate = &t
	}
	if v := req.GetEmployeeId(); v != nil {
		m.EmployeeID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetFirstName(); v != nil {
		m.FirstName = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetLastName(); v != nil {
		m.LastName = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetNotes(); v != nil {
		m.Notes = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetPhoto(); v != nil {
		m.Photo = sql.NullString{Valid: true, String: v.Value}
	}

	err = m.Update(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}

func (s *EmployeeService) Upsert(ctx context.Context, req *pb.UpsertRequest) (res *emptypb.Empty, err error) {
	var m models.Employee
	if v := req.GetBirthDate(); v != nil {
		if err = v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid BirthDate: %s%w", err.Error(), validation.ErrUserInput)
			return
		}
		t := models.NewTime(v.AsTime())
		m.BirthDate = &t
	}
	if v := req.GetEmployeeId(); v != nil {
		m.EmployeeID = sql.NullInt64{Valid: true, Int64: v.Value}
	}
	if v := req.GetFirstName(); v != nil {
		m.FirstName = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetLastName(); v != nil {
		m.LastName = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetNotes(); v != nil {
		m.Notes = sql.NullString{Valid: true, String: v.Value}
	}
	if v := req.GetPhoto(); v != nil {
		m.Photo = sql.NullString{Valid: true, String: v.Value}
	}

	err = m.Upsert(ctx, s.db)
	if err != nil {
		return
	}

	res = new(emptypb.Empty)

	return
}
