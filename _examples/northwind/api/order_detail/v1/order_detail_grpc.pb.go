// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: order_detail/v1/order_detail.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "northwind/api/typespb/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderDetailServiceClient is the client API for OrderDetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderDetailServiceClient interface {
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*v1.Order, error)
	OrderDetailByOrderIDProductID(ctx context.Context, in *OrderDetailByOrderIDProductIDRequest, opts ...grpc.CallOption) (*v1.OrderDetail, error)
	Product(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*v1.Product, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type orderDetailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderDetailServiceClient(cc grpc.ClientConnInterface) OrderDetailServiceClient {
	return &orderDetailServiceClient{cc}
}

func (c *orderDetailServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order_detail.v1.OrderDetailService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDetailServiceClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order_detail.v1.OrderDetailService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDetailServiceClient) Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*v1.Order, error) {
	out := new(v1.Order)
	err := c.cc.Invoke(ctx, "/order_detail.v1.OrderDetailService/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDetailServiceClient) OrderDetailByOrderIDProductID(ctx context.Context, in *OrderDetailByOrderIDProductIDRequest, opts ...grpc.CallOption) (*v1.OrderDetail, error) {
	out := new(v1.OrderDetail)
	err := c.cc.Invoke(ctx, "/order_detail.v1.OrderDetailService/OrderDetailByOrderIDProductID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDetailServiceClient) Product(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*v1.Product, error) {
	out := new(v1.Product)
	err := c.cc.Invoke(ctx, "/order_detail.v1.OrderDetailService/Product", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDetailServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order_detail.v1.OrderDetailService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderDetailServiceClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order_detail.v1.OrderDetailService/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderDetailServiceServer is the server API for OrderDetailService service.
// All implementations must embed UnimplementedOrderDetailServiceServer
// for forward compatibility
type OrderDetailServiceServer interface {
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	Insert(context.Context, *InsertRequest) (*emptypb.Empty, error)
	Order(context.Context, *OrderRequest) (*v1.Order, error)
	OrderDetailByOrderIDProductID(context.Context, *OrderDetailByOrderIDProductIDRequest) (*v1.OrderDetail, error)
	Product(context.Context, *ProductRequest) (*v1.Product, error)
	Update(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	Upsert(context.Context, *UpsertRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedOrderDetailServiceServer()
}

// UnimplementedOrderDetailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderDetailServiceServer struct {
}

func (UnimplementedOrderDetailServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrderDetailServiceServer) Insert(context.Context, *InsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedOrderDetailServiceServer) Order(context.Context, *OrderRequest) (*v1.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (UnimplementedOrderDetailServiceServer) OrderDetailByOrderIDProductID(context.Context, *OrderDetailByOrderIDProductIDRequest) (*v1.OrderDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDetailByOrderIDProductID not implemented")
}
func (UnimplementedOrderDetailServiceServer) Product(context.Context, *ProductRequest) (*v1.Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Product not implemented")
}
func (UnimplementedOrderDetailServiceServer) Update(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrderDetailServiceServer) Upsert(context.Context, *UpsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedOrderDetailServiceServer) mustEmbedUnimplementedOrderDetailServiceServer() {}

// UnsafeOrderDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderDetailServiceServer will
// result in compilation errors.
type UnsafeOrderDetailServiceServer interface {
	mustEmbedUnimplementedOrderDetailServiceServer()
}

func RegisterOrderDetailServiceServer(s grpc.ServiceRegistrar, srv OrderDetailServiceServer) {
	s.RegisterService(&OrderDetailService_ServiceDesc, srv)
}

func _OrderDetailService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDetailServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_detail.v1.OrderDetailService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDetailServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDetailService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDetailServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_detail.v1.OrderDetailService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDetailServiceServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDetailService_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDetailServiceServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_detail.v1.OrderDetailService/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDetailServiceServer).Order(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDetailService_OrderDetailByOrderIDProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDetailByOrderIDProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDetailServiceServer).OrderDetailByOrderIDProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_detail.v1.OrderDetailService/OrderDetailByOrderIDProductID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDetailServiceServer).OrderDetailByOrderIDProductID(ctx, req.(*OrderDetailByOrderIDProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDetailService_Product_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDetailServiceServer).Product(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_detail.v1.OrderDetailService/Product",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDetailServiceServer).Product(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDetailService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDetailServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_detail.v1.OrderDetailService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDetailServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderDetailService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderDetailServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order_detail.v1.OrderDetailService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderDetailServiceServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderDetailService_ServiceDesc is the grpc.ServiceDesc for OrderDetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderDetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_detail.v1.OrderDetailService",
	HandlerType: (*OrderDetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _OrderDetailService_Delete_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _OrderDetailService_Insert_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _OrderDetailService_Order_Handler,
		},
		{
			MethodName: "OrderDetailByOrderIDProductID",
			Handler:    _OrderDetailService_OrderDetailByOrderIDProductID_Handler,
		},
		{
			MethodName: "Product",
			Handler:    _OrderDetailService_Product_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrderDetailService_Update_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _OrderDetailService_Upsert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_detail/v1/order_detail.proto",
}
