// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: us_state/v1/us_state.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "northwind/api/typespb/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsStateServiceClient is the client API for UsStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsStateServiceClient interface {
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UsStateByStateID(ctx context.Context, in *UsStateByStateIDRequest, opts ...grpc.CallOption) (*v1.UsState, error)
}

type usStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsStateServiceClient(cc grpc.ClientConnInterface) UsStateServiceClient {
	return &usStateServiceClient{cc}
}

func (c *usStateServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/us_state.v1.UsStateService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usStateServiceClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/us_state.v1.UsStateService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usStateServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/us_state.v1.UsStateService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usStateServiceClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/us_state.v1.UsStateService/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usStateServiceClient) UsStateByStateID(ctx context.Context, in *UsStateByStateIDRequest, opts ...grpc.CallOption) (*v1.UsState, error) {
	out := new(v1.UsState)
	err := c.cc.Invoke(ctx, "/us_state.v1.UsStateService/UsStateByStateID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsStateServiceServer is the server API for UsStateService service.
// All implementations must embed UnimplementedUsStateServiceServer
// for forward compatibility
type UsStateServiceServer interface {
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	Insert(context.Context, *InsertRequest) (*emptypb.Empty, error)
	Update(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	Upsert(context.Context, *UpsertRequest) (*emptypb.Empty, error)
	UsStateByStateID(context.Context, *UsStateByStateIDRequest) (*v1.UsState, error)
	mustEmbedUnimplementedUsStateServiceServer()
}

// UnimplementedUsStateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsStateServiceServer struct {
}

func (UnimplementedUsStateServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUsStateServiceServer) Insert(context.Context, *InsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedUsStateServiceServer) Update(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUsStateServiceServer) Upsert(context.Context, *UpsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedUsStateServiceServer) UsStateByStateID(context.Context, *UsStateByStateIDRequest) (*v1.UsState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsStateByStateID not implemented")
}
func (UnimplementedUsStateServiceServer) mustEmbedUnimplementedUsStateServiceServer() {}

// UnsafeUsStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsStateServiceServer will
// result in compilation errors.
type UnsafeUsStateServiceServer interface {
	mustEmbedUnimplementedUsStateServiceServer()
}

func RegisterUsStateServiceServer(s grpc.ServiceRegistrar, srv UsStateServiceServer) {
	s.RegisterService(&UsStateService_ServiceDesc, srv)
}

func _UsStateService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsStateServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/us_state.v1.UsStateService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsStateServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsStateService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsStateServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/us_state.v1.UsStateService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsStateServiceServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsStateService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsStateServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/us_state.v1.UsStateService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsStateServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsStateService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsStateServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/us_state.v1.UsStateService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsStateServiceServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsStateService_UsStateByStateID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsStateByStateIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsStateServiceServer).UsStateByStateID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/us_state.v1.UsStateService/UsStateByStateID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsStateServiceServer).UsStateByStateID(ctx, req.(*UsStateByStateIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsStateService_ServiceDesc is the grpc.ServiceDesc for UsStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "us_state.v1.UsStateService",
	HandlerType: (*UsStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _UsStateService_Delete_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _UsStateService_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UsStateService_Update_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _UsStateService_Upsert_Handler,
		},
		{
			MethodName: "UsStateByStateID",
			Handler:    _UsStateService_UsStateByStateID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "us_state/v1/us_state.proto",
}
